<?php
namespace Net\TomasKadlec\LunchGuy\BaseBundle\Tests\Service\Configuration;

use League\Flysystem\Filesystem;
use Net\TomasKadlec\LunchGuy\BaseBundle\Service\Configuration\FilesystemProvider;
use Net\TomasKadlec\Test\TestCase\ApplicationTestCase;

/**
 * Class FilesystemProviderTest
 * @package Net\TomasKadlec\LunchGuy\BaseBundle\Tests\Service\Configuration
 */
class FilesystemProviderTest extends ApplicationTestCase
{

    const CONFIG_EXISTING = 'existing_config.yml';
    const CONFIG_NOTEXISTING = 'not_existing_config.yml';

    /** @var  FilesystemProvider */
    protected $filesystemProvider;

    /** @inheritdoc */
    protected function setUp()
    {
        parent::setUp();
        $this->filesystemProvider = $this->container->get('net_tomas_kadlec_lunch_guy_base.service_configuration.filesystem_provider');
        $this->createConfiguration(static::CONFIG_EXISTING);
    }

    /** @inheritdoc */
    protected function tearDown()
    {
        $this->deleteConfiguration(static::CONFIG_EXISTING);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     *
     */
    public function testRead()
    {
        $config = $this->filesystemProvider->read(static::CONFIG_EXISTING);
        $this->assertNotEmpty($config);

        $this->assertNotEmpty($this->filesystemProvider->getId());
        $this->assertEquals($this->filesystemProvider->getId(), static::CONFIG_EXISTING);

        $this->assertNotEmpty($this->filesystemProvider->getTimestamp());
        $this->assertLessThanOrEqual(time(), $this->filesystemProvider->getTimestamp());

        $this->assertNotEmpty($this->filesystemProvider->getConfig());
        $this->assertEquals($this->filesystemProvider->getConfig(), $config);
        return [
            'provider' => $this->filesystemProvider,
            'id' => $this->filesystemProvider->getId(),
            'config' => $this->filesystemProvider->getConfig(),
            'timestamp' => $this->filesystemProvider->getTimestamp(),
        ];
    }

    /**
     * @depends testRead
     */
    public function testReadCached($values)
    {
        sleep(2);
        /** @var FilesystemProvider $provider */
        $provider = $values['provider'];
        $config = $provider->read(static::CONFIG_EXISTING);

        $this->assertEquals($values['id'], $provider->getId());
        $this->assertEquals($values['config'], $config);
        $this->assertEquals($values['timestamp'], $provider->getTimestamp());
    }

    /**
     * @depends testRead
     */
    public function testReadRefresh($values)
    {
        sleep(2);
        /** @var FilesystemProvider $provider */
        $provider = $values['provider'];
        $config = $provider->read(static::CONFIG_EXISTING, [ 'refresh' => true ]);

        $this->assertEquals($values['id'], $provider->getId());
        $this->assertEquals($values['config'], $config);
        $this->assertLessThan($provider->getTimestamp(), $values['timestamp']);
    }

    public function testReadNotExisting()
    {
        $this->setExpectedException(\League\Flysystem\Exception::class);
        $config = $this->filesystemProvider->read(static::CONFIG_NOTEXISTING);
    }

    public function testWrite()
    {
        $config = $this->filesystemProvider->read(static::CONFIG_EXISTING);
        $id = $this->filesystemProvider->getId();
        $timestamp = $this->filesystemProvider->getTimestamp();

        sleep(2);

        $config['restaurants']['XYZ']['display'] = true;

        $this->filesystemProvider->write(static::CONFIG_EXISTING, $config);

        $this->assertEquals(static::CONFIG_EXISTING, $this->filesystemProvider->getId());
        $this->assertEquals($config, $this->filesystemProvider->getConfig());
        $this->assertLessThan($this->filesystemProvider->getTimestamp(), $timestamp);

        $config = $this->filesystemProvider->read(static::CONFIG_EXISTING, ['refresh' => true]);
        $this->assertArrayHasKey('restaurants', $config);
        $this->assertArrayHasKey('XYZ', $config['restaurants']);
        $this->assertArrayHasKey('display', $config['restaurants']['XYZ']);
        $this->assertTrue($config['restaurants']['XYZ']['display']);
    }

    /**
     * TODO implement somehow?!
     */
    public function testWriteFail()
    {

    }

    protected function createConfiguration($id)
    {
        $config = <<< CONFIG
lunch_guy:
    restaurants:
        'Na Urale': { display: true }
        'U TopolÅ¯': { display: false }
    output:
        slack:
            uri: http://test.slack.com/TOKEN
CONFIG;
        $reflector =  new \ReflectionObject($this->filesystemProvider);

        $propertyReflector = $reflector->getProperty('filesystem');
        $propertyReflector->setAccessible(true);
        /** @var Filesystem $filesystem */
        $filesystem = $propertyReflector->getValue($this->filesystemProvider);

        $getPathFromId = $reflector->getMethod('getPathFromId');
        $getPathFromId->setAccessible(true);

        $filesystem->put($getPathFromId->invoke($this->filesystemProvider, $id), $config);
    }

    protected function deleteConfiguration($id)
    {
        $reflector =  new \ReflectionObject($this->filesystemProvider);

        $propertyReflector = $reflector->getProperty('filesystem');
        $propertyReflector->setAccessible(true);
        /** @var Filesystem $filesystem */
        $filesystem = $propertyReflector->getValue($this->filesystemProvider);

        $getPathFromId = $reflector->getMethod('getPathFromId');
        $getPathFromId->setAccessible(true);

        $filesystem->delete($getPathFromId->invoke($this->filesystemProvider, $id));
    }

}